// c++에서는 특정 변수의 실제 이름 대신 사용할 수 있는 참조하라는 새 기능이 추가되었다. 

#include<iostream>

using namespace std;


void swap(int& n1, int& n2){
	int tmp;
	
	tmp = n1;
	n1 = n2;
	n2 = tmp;
	
	return;
}

int main(){

	int x = 10, n1 = 20, n2 = 30;
	int& y = x;
	// &는 주소 연산자가 아니라 타입 명시이다. 
	// 참조자는 선언과 동시에 초기화되어야 한다.
	// 참조자는 참조 대상과 형이 일치해야 한다.
	// 참조자는 한 번 초기화되면 참조 대상을 바꿀 수 없다.
	// 참조자를 변경하면 참조 대상도 변경된다. 
	
	
	
	cout << "x : " << x << ", y : " << y << endl;
	y++;	// x도 1 증가하게 된다. 
	cout << "x : " << x << ", y++ : " << y << endl;
	cout << "&x : " << &x << ", &y : " << &y << endl;
	// 주소값도 일치함을 알 수 있다.


	// 이러한 참조자는 실은 일반적인 경우에서는 별로 쓸모가 없다.
	// 그러나, C언어에서 매번 포인터를 넘기던 함수의 입력에서
	// 대신 참조자를 넘길 수도 있다. 
	
	
	cout << "n1 : " << n1 << "  n2 : " << n2 << endl;
	swap(n1, n2);
	// C언어의 경우를 생각해보자. 함수의 입력으로 변수를 넣을 시,
	// 함수의 변수 = 입력;  이런 식으로 함수 스택의 임시 변수에 값 대입이 이루어진다.
	// 위의 함수처럼 참조자가 입력인 경우,
	// 참조형 변수 = 입력;  이런 식의, 메인 위의 int& y = x와 같은 연산이 이루어진다. 
	// ***참조자의 핵심은 포인터를 사용하지 않고 원본을 넘길 수 있다는 데에 있다. 
	// 만약 수정을 원하지 않는다면 함수의 입력형에 const를 넣어줘야 한다. 
	cout << "n1 : " << n1 << "  n2 : " << n2 << endl;
	
	
	
	return 0;
}
